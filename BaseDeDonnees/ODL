class Utilisateur
{
	attribute string login;
	attribute string mdp;
	attribute string mail;
	attribute enum typeutil {utilisateur, admin} type;
	
	relationship Set<Terme> possede inverse Terme::estPossedePar;
	relationship Set<Concept> possede inverse Concept::estPossedePar;
	relationship Set<Synonyme> possede inverse Synonyme::estPossedePar;
	
	void creerConcept(in Vedette v);
	void creerTerme(in Terme termeParent);
	void creerSynonyme(in Vedette v);
	
	void supprimerConcept(in Concept c);
	void supprimerTerme(in Terme t);
	void supprimerSynonyme(in Synonyme s);
	
	void supprimerCompte();
};

class Concept
{
	attribute string nomConcept;
	attribute string description;
	
	relationship Utilisateur estPossedePar inverse Utilisateur::possede;
	relationship Vedette estDesigne inverse Vedette::designe;
	
	void ajouter(in Terme t);
	bool trouver(in Terme t);
	void retirer(in Terme t);
	void modifierDescription(in String desc);
};

Interface Terme{

	attribute string nomTerme;
	attribute string description;
	
	relationship Set<Terme> estParent inverse aPourParent;
	relationship Set<Terme> aPourParent inverse estParent;
	relationship Utilisateur estPossedePar inverse Utilisateur::possede;
	
	void modifierDescription(in string desc);
	void modifierParent(in Terme t);
	Set<Terme> avoirFils();
};

class Vedette:Terme (extent Vedettes key nomTerme){
	
	relationship Set<Synonyme> aPourSynonyme inverse Synonyme::estSynonyme;
	relationship Set<Concept> designe inverse Concept::estDesigne;
	
};

class Synonyme{

	attribute string synonyme;
	
	relationship Vedette estSynonyme inverse Vedette::aPourSynonyme;
	relationship Utilisateur estPossedePar inverse Utilisateur::possede;
	
	void modifierVedette(in Vedette v);
	
};
